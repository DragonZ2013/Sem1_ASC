     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;a-doubleword b-byte c-word x-qword
    14                                  ;(a+b/c-1)/(b+2)-x
    15                                  ;Cu semn
    16 00000000 0F000000                    a dd 15
    17 00000004 0A                          b db 10
    18 00000005 0500                        c dw 5
    19 00000007 3C00000000000000            x dq 60
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25 00000000 A0[04000000]                    mov AL, [b]
    26 00000005 6698                        cbw
    27 00000007 6699                        cwd
    28 00000009 668B1D[05000000]            mov BX, [c];BX=c
    29 00000010 66F7FB                      idiv BX; AX=b/c
    30 00000013 6683E801                    sub AX,1;AX=b/c-1
    31 00000017 6699                        cwd
    32 00000019 668B1D[00000000]            mov BX, word[a]
    33 00000020 668B0D[02000000]            mov CX, word[a+2]
    34 00000027 6601D8                      add AX,BX
    35 0000002A 6611CA                      adc DX,CX
    36                                      ;sub AX,1
    37                                      ;sbb DX,0
    38 0000002D 6699                        cwd
    39 0000002F 6650                        push AX
    40 00000031 6659                        pop CX
    41 00000033 A0[04000000]                mov AL, [b]
    42 00000038 6698                        cbw
    43 0000003A 6683C002                    add AX,2
    44 0000003E 6650                        push AX
    45 00000040 665B                        pop BX
    46 00000042 6651                        push CX
    47 00000044 6658                        pop AX
    48 00000046 66F7FB                      idiv BX;AX=DX:AX/BX = (a+b/c-1)/(b+2)
    49 00000049 8B1D[07000000]              mov EBX, dword[x]
    50 0000004F 8B0D[0B000000]              mov ECX, dword[x+4];EDX:ECX=x
    51 00000055 6650                        push AX
    52 00000057 6652                        push DX
    53 00000059 58                          pop EAX
    54 0000005A 99                          cdq
    55 0000005B 29D8                        sub EAX,EBX
    56 0000005D 19CA                        sbb EDX,ECX;(a+b/c-1)/(b+2)-x
    57                                          ; exit(0)
    58 0000005F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 00000061 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
