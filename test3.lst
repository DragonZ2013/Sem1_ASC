     1                                  ; Scrieți un program în limbaj de asamblare care să rezolve expresia aritmetică, considerând domeniile de definiție ale variabilelor
     2                                  ; a - doubleword; b, d - byte; c - word; e - qword
     3                                  ; a + b / c - d * 2 - e
     4                                  bits 32 ;asamblare si compilare pentru arhitectura de 32 biti
     5                                  ; definim punctul de intrare in programul principal
     6                                  global  start 
     7                                  
     8                                  extern  exit ; indicam asamblorului ca exit exista, chiar daca noi nu o vom defini
     9                                  import  exit msvcrt.dll; exit este o functie care incheie procesul, este definita in msvcrt.dll
    10                                          ; msvcrt.dll contine exit, printf si toate celelalte functii C-runtime importante
    11                                  segment  data use32 class=data ; segmentul de date in care se vor defini variabilele 
    12 00000000 7D000000                	a dd 125
    13 00000004 02                      	b db 2
    14 00000005 0F00                    	c dw 15
    15 00000007 C8                      	d db 200
    16 00000008 5000000000000000        	e dq 80
    17                                  segment  code use32 class=code ; segmentul de cod
    18                                  start: 
    19                                  	;pentru a calcula b/c, convertim b de la byte la doubleword pentru a-l putea imparti la word-ul c
    20 00000000 A0[04000000]            	mov al, [b]
    21 00000005 B400                    	mov ah, 0 ;conversie fara semn de la al la ax
    22 00000007 66BA0000                	mov dx, 0 ;conversie fara semn de la ax la dx:ax
    23                                  	;dx:ax = b
    24 0000000B 66F735[05000000]        	div word [c] ;impartire fara semn dx:ax la c
    25                                  	;ax=b/c	
    26                                  	;catul impartirii este in ax (restul este in dx, dar mergem mai departe doar cu catul)
    27                                  
    28 00000012 6689C3                  	mov bx, ax ;salvam b/c in bx pentru a putea folosi ax la inmultirea d*2
    29 00000015 B002                    	mov al, 2
    30 00000017 F625[07000000]          	mul byte [d] ;ax=d*2
    31                                  
    32 0000001D 6629C3                  	sub bx, ax ;bx = b / c - d * 2
    33                                  	; convertim la doubleword word-ul bx pentru a-l putea aduna cu doubleword-ul a
    34 00000020 66B90000                	mov cx, 0 ; conversie fara semn de la bx la cx:bx
    35                                  	;cx:bx=b/c-d*2
    36                                  
    37 00000024 66A1[00000000]          	mov ax, word [a]
    38 0000002A 668B15[02000000]        	mov dx, word [a+2] ;dx:ax=a
    39                                  
    40 00000031 6601D8                  	add ax, bx
    41 00000034 6611CA                  	adc dx, cx ;dx:ax = a + b / c - d * 2
    42                                  	
    43 00000037 6652                    	push dx
    44 00000039 6650                    	push ax
    45 0000003B 58                      	pop eax ;eax = a + b / c - d * 2
    46                                  	
    47 0000003C BA00000000              	mov edx, 0 ;edx:eax = a + b / c - d * 2
    48 00000041 2B05[08000000]          	sub eax, dword [e]
    49 00000047 1B15[0C000000]          	sbb edx, dword [e+4] ;edx:eax = a + b / c - d * 2 - e
    50                                  	
    51 0000004D 6A00                    	push dword 0 ;se pune pe stiva codul de retur al functiei exit
    52 0000004F FF15[00000000]          	call [exit] ;apelul functiei sistem exit pentru terminarea executiei programului	
